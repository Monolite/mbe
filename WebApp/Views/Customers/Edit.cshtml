@model Business.Essentials.Model.Customer

@{
    ViewBag.Title = Business.Essentials.Resources.Edit;
}

<h2>@Business.Essentials.Resources.Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>@Business.Essentials.Resources.Customer</legend>

        @Html.HiddenFor(model => model.Id)

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
              @Html.ValidationMessageFor(model => model.Name)
        </div>

         <div class="editor-label">
            @Html.LabelFor(model => model.Zone)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Zone)
              @Html.ValidationMessageFor(model => model.Zone)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PriceList)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.PriceListId)
            @Html.ValidationMessageFor(model => model.PriceListId)
            @if (Model.PriceList != null)
            {
                <script type="text/javascript">
                    var priceList = [{ id: "@Model.PriceList.Id", name: "@Model.PriceList.Name"}];
                </script>
            }
            <script type="text/javascript">
                $(document).ready(function () {
                    $("#PriceListId").tokenInput("@Url.Action("GetSuggestions", "PriceLists")",
                    {
                        hintText: "@Business.Essentials.Resources.HIntText",
                        noResultsText: "@Business.Essentials.Resources.NoResultsText",
                        searchingText: "@Business.Essentials.Resources.SearchingText",
                        prePopulate: (typeof supplier === "undefined") ? null : category,
                        queryParam: "pattern", minChars: 1, tokenLimit: 1
                    });
                });
            </script>
            
        </div>

         <div class="editor-label">
            @Html.LabelFor(model => model.CreditLimit)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CreditLimit)
        </div>

         <div class="editor-label">
            @Html.LabelFor(model => model.CreditDays)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CreditDays)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Comment)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Comment)
        </div>

        <p>
            <input type="submit" value= @Business.Essentials.Resources.Save />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink(Business.Essentials.Resources.BackToList, "Index")
</div>
